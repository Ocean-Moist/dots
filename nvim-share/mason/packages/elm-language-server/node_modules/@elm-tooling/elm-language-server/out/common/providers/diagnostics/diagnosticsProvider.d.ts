import { Diagnostic as LspDiagnostic, Disposable } from "vscode-languageserver";
import { IProgram } from "../../../compiler/program";
import { Diagnostic } from "../../../compiler/diagnostics";
import { DiagnosticSource } from "./diagnosticSource";
import { DiagnosticKind } from "./fileDiagnostics";
import { ISourceFile } from "../../../compiler/forest";
export interface IElmIssueRegion {
    start: {
        line: number;
        column: number;
    };
    end: {
        line: number;
        column: number;
    };
}
export interface IElmIssue {
    tag: string;
    overview: string;
    subregion: string;
    details: string;
    region: IElmIssueRegion;
    type: string;
    file: string;
}
export interface IDiagnostic extends Omit<LspDiagnostic, "code"> {
    source: DiagnosticSource;
    data: {
        uri: string;
        code: string;
    };
}
export declare function convertFromCompilerDiagnostic(diag: Diagnostic): IDiagnostic;
export declare function convertToCompilerDiagnostic(diag: IDiagnostic): Diagnostic;
export declare class DiagnosticsProvider implements Disposable {
    private elmMakeDiagnostics;
    private elmReviewDiagnostics;
    private elmLsDiagnostics;
    private currentDiagnostics;
    private events;
    private connection;
    private clientSettings;
    private workspaces;
    private elmWorkspaceMatcher;
    private documentEvents;
    private pendingRequest;
    private pendingDiagnostics;
    private diagnosticsDelayer;
    private diagnosticsOperation;
    private changeSeq;
    private disposables;
    constructor();
    interruptDiagnostics<T>(f: () => T): T;
    interruptDiagnosticsAsync<T>(f: () => Promise<T>): Promise<T>;
    getCurrentDiagnostics(uri: string, kind?: DiagnosticKind): IDiagnostic[];
    /**
     * Used for tests only
     */
    forceElmLsDiagnosticsUpdate(sourceFile: ISourceFile, program: IProgram): void;
    dispose(): void;
    private requestDiagnostics;
    private requestAllDiagnostics;
    private triggerDiagnostics;
    private updateDiagnostics;
    private deleteDiagnostics;
    private getDiagnostics;
    private getElmMakeDiagnostics;
    private getElmReviewDiagnostics;
    private resetDiagnostics;
    private change;
}
