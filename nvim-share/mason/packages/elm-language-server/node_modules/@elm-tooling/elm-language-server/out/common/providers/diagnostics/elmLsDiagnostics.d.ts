import { ISourceFile } from "../../../compiler/forest";
import { IProgram } from "../../../compiler/program";
import { IDiagnostic } from "./diagnosticsProvider";
import type { ServerCancellationToken } from "../../cancellation";
export declare class ElmLsDiagnostics {
    private language;
    private elmWorkspaceMatcher;
    private connection;
    private elmAnalyseJsonService;
    private readonly exposedValuesAndTypesQuery;
    private readonly exposedValueAndTypeUsagesQuery;
    private readonly moduleImportsQuery;
    private readonly moduleReferencesQuery;
    private readonly importModuleAliasesQuery;
    private readonly moduleAliasReferencesQuery;
    private readonly patternsQuery;
    private readonly caseBranchesQuery;
    private readonly booleanCaseExpressionsQuery;
    private readonly concatOfListsQuery;
    private readonly consOfItemAndListQuery;
    private readonly useConsOverConcatQuery;
    private readonly singleFieldRecordTypesQuery;
    private readonly unnecessaryListConcatQuery;
    private readonly unusedPortModuleQuery;
    private readonly operatorFunctionsQuery;
    private readonly typeAliasesQuery;
    private readonly typeAliasUsagesQuery;
    private readonly unionVariantsQuery;
    private readonly unionVariantUsagesQuery;
    private readonly patternReferencesQuery;
    constructor();
    private excludedFolder;
    createDiagnostics: (sourceFile: ISourceFile, program: IProgram) => IDiagnostic[];
    createSuggestionDiagnostics: (sourceFile: ISourceFile, program: IProgram, serverCancellationToken: ServerCancellationToken) => IDiagnostic[];
    private getUnusedImportDiagnostics;
    private getUnusedImportValueAndTypeDiagnostics;
    private getUnusedImportAliasDiagnostics;
    private getUnusedPatternVariableDiagnostics;
    private getCaseBranchMapNothingToNothingDiagnostics;
    private getBooleanCaseExpressionDiagnostics;
    private getDropConcatOfListsDiagnostics;
    private getDropConsOfItemAndListDiagnostics;
    private getUseConsOverConcatDiagnostics;
    private getSingleFieldRecordDiagnostics;
    private getUnnecessaryListConcatDiagnostics;
    private getUnnecessaryPortModuleDiagnostics;
    private getFullyAppliedOperatorAsPrefixDiagnostics;
    private getUnusedTypeAliasDiagnostics;
    private getUnusedValueConstructorDiagnostics;
    private getNodeRange;
}
