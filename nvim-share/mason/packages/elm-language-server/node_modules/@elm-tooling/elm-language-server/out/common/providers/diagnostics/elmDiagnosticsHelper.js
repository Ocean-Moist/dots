"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElmDiagnosticsHelper = void 0;
const vscode_languageserver_1 = require("vscode-languageserver");
const vscode_uri_1 = require("vscode-uri");
const diagnostics_1 = require("../../../compiler/diagnostics");
const elmMakeDiagnostics_1 = require("./elmMakeDiagnostics");
class ElmDiagnosticsHelper {
    static issuesToDiagnosticMap(issues, elmWorkspaceFolder) {
        return issues.reduce((acc, issue) => {
            var _a;
            const uri = this.getUriFromIssue(issue, elmWorkspaceFolder);
            const diagnostic = this.elmMakeIssueToDiagnostic(issue);
            const arr = (_a = acc.get(uri)) !== null && _a !== void 0 ? _a : [];
            arr.push(diagnostic);
            acc.set(uri, arr);
            return acc;
        }, new Map());
    }
    static severityStringToDiagnosticSeverity(severity) {
        switch (severity) {
            case "error":
                return vscode_languageserver_1.DiagnosticSeverity.Error;
            case "warning":
                return vscode_languageserver_1.DiagnosticSeverity.Warning;
            default:
                return vscode_languageserver_1.DiagnosticSeverity.Error;
        }
    }
    static getUriFromIssue(issue, elmWorkspaceFolder) {
        return vscode_uri_1.Utils.joinPath(elmWorkspaceFolder, issue.file).toString();
    }
    static elmMakeIssueToDiagnostic(issue) {
        const lineRange = vscode_languageserver_1.Range.create(issue.region.start.line - 1, issue.region.start.column - 1, issue.region.end.line - 1, issue.region.end.column - 1);
        const messagePrefix = issue.overview ? `${issue.overview} - ` : "";
        let code = "elm_make";
        if (issue.overview.startsWith(elmMakeDiagnostics_1.NAMING_ERROR)) {
            code = diagnostics_1.Diagnostics.MissingValue.code;
        }
        if (issue.overview.startsWith("MODULE NOT FOUND")) {
            code = diagnostics_1.Diagnostics.ImportMissing.code;
        }
        if (issue.overview.startsWith("MISSING PATTERNS - This `case`")) {
            code = diagnostics_1.Diagnostics.IncompleteCasePattern(0).code;
        }
        return {
            range: lineRange,
            message: `${messagePrefix}${issue.details.replace(/\[\d+m/g, "")}`,
            severity: this.severityStringToDiagnosticSeverity(issue.type),
            source: "Elm",
            data: { uri: issue.file, code },
        };
    }
}
exports.ElmDiagnosticsHelper = ElmDiagnosticsHelper;
//# sourceMappingURL=elmDiagnosticsHelper.js.map