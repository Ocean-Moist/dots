import { CodeAction, Command, Position, Range, TextEdit } from "vscode-languageserver";
import { IProgramHost } from "../../compiler/program";
import { Diagnostic } from "../../compiler/diagnostics";
import { ICodeActionParams } from "./paramsExtensions";
interface IPreferredAction {
    priority: number;
    thereCanOnlyBeOne?: boolean;
}
export interface ICodeActionRegistration {
    errorCodes: string[];
    fixId: string;
    preferredAction?: IPreferredAction;
    getCodeActions(params: ICodeActionParams): CodeAction[] | undefined;
    getFixAllCodeAction(params: ICodeActionParams): ICodeAction | undefined;
}
export interface ICodeAction extends CodeAction {
    data: {
        fixId: string;
        isFixAll?: boolean;
    };
}
export interface IRefactorCodeAction extends Omit<CodeAction, "isPreferred"> {
    data: {
        uri: string;
        refactorName: string;
        actionName: string;
        range: Range;
        renamePosition?: Position;
    };
}
export interface IRefactorEdit {
    edits?: TextEdit[];
    renamePosition?: Position;
}
export interface IRefactorRegistration {
    preferredAction?: IPreferredAction;
    getAvailableActions(params: ICodeActionParams): IRefactorCodeAction[];
    getEditsForAction(params: ICodeActionParams, actionName: string): IRefactorEdit;
}
export declare class CodeActionProvider {
    private connection;
    private settings;
    private elmMake;
    private diagnosticsProvider;
    private static errorCodeToRegistrationMap;
    private static refactorRegistrations;
    private static preferredActions;
    constructor(host: IProgramHost);
    static registerCodeAction(registration: ICodeActionRegistration): void;
    static registerRefactorAction(name: string, registration: IRefactorRegistration): void;
    private static getDiagnostics;
    private static forEachDiagnostic;
    static getCodeAction(params: ICodeActionParams, title: string, edits: TextEdit[] | {
        [uri: string]: TextEdit[];
    }, command?: Command): CodeAction;
    static getFixAllCodeAction(title: string, params: ICodeActionParams, errorCodes: string[], fixId: string, callback: (edits: TextEdit[], diagnostic: Diagnostic) => void, callbackChanges?: (edits: {
        [uri: string]: TextEdit[];
    }, diagnostic: Diagnostic) => void): ICodeAction;
    protected onCodeAction(params: ICodeActionParams): CodeAction[] | undefined;
    private onCodeActionResolve;
    private addDiagnosticToCodeAction;
    protected isPreferredFix(action: ICodeAction | IRefactorCodeAction, allActions: readonly (ICodeAction | IRefactorCodeAction)[]): boolean;
    protected applyRefactorEditsToAction(refactorAction: IRefactorCodeAction, refactorEdit: IRefactorEdit): IRefactorCodeAction;
    /**
     * Only used for testing
     */
    protected static clearPreferredActions(): void;
}
export {};
