"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElmPackageCache = void 0;
const utils = __importStar(require("./utils/elmUtils"));
const multiMap_1 = require("../common/util/multiMap");
const vscode_uri_1 = require("vscode-uri");
class ElmPackageCache {
    static set packagesRoot(newPackagesRoot) {
        var _a;
        // If we somehow got a different packages root (they changed elm versions and restarted the server)
        // Clear all caches
        if (((_a = this._packagesRoot) === null || _a === void 0 ? void 0 : _a.toString()) !== newPackagesRoot.toString()) {
            this.versionsCache.clear();
            this.dependenciesCache.clear();
            this.moduleToPackages.clear();
            this._packagesRoot = newPackagesRoot;
        }
    }
    static get packagesRoot() {
        return this._packagesRoot;
    }
    constructor(loadElmJson, host) {
        this.loadElmJson = loadElmJson;
        this.host = host;
    }
    getVersions(packageName) {
        return __awaiter(this, void 0, void 0, function* () {
            const cached = ElmPackageCache.versionsCache.get(packageName);
            if (cached) {
                return cached;
            }
            const versions = ElmPackageCache.packagesRoot.scheme === "file"
                ? yield this.getVersionsFromFileSystem(packageName)
                : yield this.getVersionsFromWebsite(packageName);
            ElmPackageCache.versionsCache.set(packageName, versions);
            return versions;
        });
    }
    getDependencies(packageName, version) {
        return __awaiter(this, void 0, void 0, function* () {
            const cacheKey = `${packageName}@${version.string}`;
            const cached = ElmPackageCache.dependenciesCache.get(cacheKey);
            if (cached) {
                return cached;
            }
            const dependencies = yield this.getDependenciesWorker(packageName, version);
            ElmPackageCache.dependenciesCache.set(cacheKey, dependencies);
            return dependencies;
        });
    }
    loadAllPackageModules() {
        return __awaiter(this, void 0, void 0, function* () {
            if (ElmPackageCache.moduleToPackages.size > 0) {
                // Don't load twice
                return;
            }
            // Don't load if we're not using a file system
            if (!ElmPackageCache._packagesRoot ||
                ElmPackageCache._packagesRoot.scheme !== "file") {
                return;
            }
            try {
                const maintainers = yield this.host.readDirectory(ElmPackageCache._packagesRoot, undefined, 
                /* depth */ 1);
                for (const maintainer of maintainers) {
                    try {
                        const maintainerName = vscode_uri_1.Utils.basename(maintainer);
                        const packages = yield this.host.readDirectory(vscode_uri_1.Utils.joinPath(ElmPackageCache._packagesRoot, maintainerName), undefined, 
                        /* depth */ 1);
                        for (const packagePath of packages) {
                            try {
                                const packageAndMaintainer = `${maintainerName}/${vscode_uri_1.Utils.basename(packagePath)}`;
                                const versions = yield this.getVersions(packageAndMaintainer);
                                const latestVersion = versions[versions.length - 1];
                                const elmJsonPath = vscode_uri_1.Utils.joinPath(ElmPackageCache._packagesRoot, `${packageAndMaintainer}/${latestVersion.string}/elm.json`);
                                const elmJson = yield this.loadElmJson(elmJsonPath);
                                if (elmJson.type === "package") {
                                    const exposedModules = utils.flattenExposedModules(elmJson["exposed-modules"]);
                                    exposedModules.forEach((exposedModule) => {
                                        ElmPackageCache.moduleToPackages.set(exposedModule, packageAndMaintainer);
                                    });
                                }
                            }
                            catch (_a) {
                                // Could fail if `packageName` is not a directory
                            }
                        }
                    }
                    catch (_b) {
                        // Could fail if `maintainer` is not a directory (elm cache files)
                    }
                }
            }
            catch (_c) {
                // Could fail if packages root is invalid
            }
        });
    }
    static getPackagesWithModule(moduleName) {
        var _a;
        return (_a = this.moduleToPackages.getAll(moduleName)) !== null && _a !== void 0 ? _a : [];
    }
    getVersionsFromFileSystem(packageName) {
        return __awaiter(this, void 0, void 0, function* () {
            const maintainer = packageName.substring(0, packageName.indexOf("/"));
            const name = packageName.substring(packageName.indexOf("/") + 1, packageName.length);
            const pathToPackage = vscode_uri_1.Utils.joinPath(ElmPackageCache._packagesRoot, `${maintainer}/${name}/`);
            const folders = yield this.host.readDirectory(pathToPackage, undefined, 
            /* depth */ 1);
            const allVersions = [];
            for (const folder of folders) {
                const version = utils.parseVersion(vscode_uri_1.Utils.basename(folder));
                if (Number.isInteger(version.major) &&
                    Number.isInteger(version.minor) &&
                    Number.isInteger(version.patch)) {
                    allVersions.push(version);
                }
            }
            return allVersions;
        });
    }
    getVersionsFromWebsite(packageName) {
        return __awaiter(this, void 0, void 0, function* () {
            const maintainer = packageName.substring(0, packageName.indexOf("/"));
            const name = packageName.substring(packageName.indexOf("/") + 1, packageName.length);
            if (!ElmPackageCache.allPackagesFromWebsite) {
                ElmPackageCache.allPackagesFromWebsite = JSON.parse(yield this.host.readFile(vscode_uri_1.URI.parse("https://package.elm-lang.org/all-packages/")));
            }
            return ElmPackageCache.allPackagesFromWebsite[`${maintainer}/${name}`].map((version) => utils.parseVersion(version));
        });
    }
    getDependenciesWorker(packageName, version) {
        return __awaiter(this, void 0, void 0, function* () {
            const elmJsonPath = vscode_uri_1.Utils.joinPath(ElmPackageCache._packagesRoot, `${packageName}/${version.string}/elm.json`);
            const elmJson = yield this.loadElmJson(elmJsonPath);
            return this.parseDependencies(elmJson);
        });
    }
    parseDependencies(elmJson) {
        return new Map(Object.entries(elmJson.dependencies).map(([name, constraint]) => [
            name,
            utils.parseConstraint(constraint),
        ]));
    }
}
exports.ElmPackageCache = ElmPackageCache;
ElmPackageCache.versionsCache = new Map();
ElmPackageCache.dependenciesCache = new Map();
ElmPackageCache.moduleToPackages = new multiMap_1.MultiMap();
//# sourceMappingURL=elmPackageCache.js.map