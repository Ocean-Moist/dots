import { ElmJson, IProgramHost } from "./program";
import { IConstraint, IVersion } from "./utils/elmUtils";
import { URI } from "vscode-uri";
export interface IPackage {
    dependencies: Map<string, IConstraint>;
    version: IVersion;
}
export interface IElmPackageCache {
    getVersions(packageName: string): Promise<IVersion[]>;
    getDependencies(packageName: string, version: IVersion): Promise<Map<string, IConstraint>>;
    loadAllPackageModules(): Promise<void>;
}
export declare class ElmPackageCache implements IElmPackageCache {
    private loadElmJson;
    private host;
    private static versionsCache;
    private static dependenciesCache;
    private static moduleToPackages;
    private static _packagesRoot;
    private static allPackagesFromWebsite;
    static set packagesRoot(newPackagesRoot: URI);
    static get packagesRoot(): URI;
    constructor(loadElmJson: (elmJsonPath: URI) => Promise<ElmJson>, host: IProgramHost);
    getVersions(packageName: string): Promise<IVersion[]>;
    getDependencies(packageName: string, version: IVersion): Promise<Map<string, IConstraint>>;
    loadAllPackageModules(): Promise<void>;
    static getPackagesWithModule(moduleName: string): string[];
    private getVersionsFromFileSystem;
    private getVersionsFromWebsite;
    private getDependenciesWorker;
    private parseDependencies;
}
