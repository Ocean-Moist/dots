import { CodeLens } from "vscode-languageserver";
import { IProgram } from "../../compiler/program";
import { ISourceFile } from "../../compiler/forest";
import { ICodeLensParams } from "./paramsExtensions";
type CodeLensResult = CodeLens[] | null | undefined;
type ICodeLens = IReferenceCodeLens | IExposedCodeLens;
interface IReferenceCodeLens extends CodeLens {
    data: {
        codeLensType: "referenceCounter";
        uri: string;
    };
}
interface IExposedCodeLens extends CodeLens {
    data: {
        codeLensType: "exposed";
        uri: string;
        nameNode: string;
        isFunctionOrPort: boolean;
    };
}
export declare class CodeLensProvider {
    private readonly connection;
    private readonly settings;
    constructor();
    protected handleCodeLensRequest: (param: ICodeLensParams) => CodeLensResult;
    protected handleCodeLensResolveRequest: (codelens: ICodeLens, program: IProgram, sourceFile: ISourceFile) => ICodeLens;
    private createExposingCodeLens;
    private createReferenceCodeLens;
    private getExposingCodeLenses;
    private getReferencesCodeLenses;
}
export {};
