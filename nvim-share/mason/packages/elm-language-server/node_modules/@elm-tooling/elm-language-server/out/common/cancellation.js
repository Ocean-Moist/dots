"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThrottledCancellationToken = exports.ServerCancellationToken = exports.OperationCanceledException = void 0;
class OperationCanceledException {
}
exports.OperationCanceledException = OperationCanceledException;
class ServerCancellationToken {
    constructor(cancellationToken) {
        this.cancellationToken = cancellationToken;
    }
    isCancellationRequested() {
        return this.cancellationToken.isCancellationRequested;
    }
    throwIfCancellationRequested() {
        if (this.isCancellationRequested()) {
            throw new OperationCanceledException();
        }
    }
}
exports.ServerCancellationToken = ServerCancellationToken;
/**
 * ThrottledCancellationToken taken from Typescript: https://github.com/microsoft/TypeScript/blob/79ffd03f8b73010fa03cef624e5f1770bc9c975b/src/services/services.ts#L1152
 */
class ThrottledCancellationToken {
    constructor(cancellationToken, throttleWaitMilliseconds = 20) {
        this.cancellationToken = cancellationToken;
        this.throttleWaitMilliseconds = throttleWaitMilliseconds;
        // Store when we last tried to cancel.  Checking cancellation can be expensive (as we have
        // to marshall over to the host layer).  So we only bother actually checking once enough
        // time has passed.
        this.lastCancellationCheckTime = 0;
    }
    isCancellationRequested() {
        const time = performance.now();
        const duration = Math.abs(time - this.lastCancellationCheckTime);
        if (duration >= this.throttleWaitMilliseconds) {
            // Check no more than once every throttle wait milliseconds
            this.lastCancellationCheckTime = time;
            try {
                return this.cancellationToken.isCancellationRequested;
            }
            catch (_a) {
                //
            }
        }
        return false;
    }
    throwIfCancellationRequested() {
        if (this.isCancellationRequested()) {
            throw new OperationCanceledException();
        }
    }
}
exports.ThrottledCancellationToken = ThrottledCancellationToken;
//# sourceMappingURL=cancellation.js.map