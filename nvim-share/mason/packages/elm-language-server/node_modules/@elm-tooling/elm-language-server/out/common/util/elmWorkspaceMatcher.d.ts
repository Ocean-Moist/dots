import { CancellationToken } from "vscode-languageserver";
import { URI } from "vscode-uri";
import { IProgram } from "../../compiler/program";
import { ISourceFile } from "../../compiler/forest";
export interface IParams {
    program: IProgram;
    sourceFile: ISourceFile;
}
/**
 * Identifies the relevant ElmWorkspace for a given ParamType, either directly
 * (getElmWorkspaceFor) or when an event handler receives a ParamType
 * (handle) it returns a params object with a combined type ParamType and IParams
 * which has the program and sourceFile.
 */
export declare class ElmWorkspaceMatcher<ParamType> {
    private getUriFor;
    private elmWorkspaces;
    constructor(getUriFor: (param: ParamType) => URI);
    handle<ResultType>(handler: (param: ParamType & IParams, token?: CancellationToken) => ResultType | Promise<ResultType>): (param: ParamType, token?: CancellationToken) => Promise<ResultType>;
    handleResolve<ResultType>(handler: (param: ParamType, program: IProgram, sourceFile: ISourceFile, token?: CancellationToken) => ResultType | Promise<ResultType>): (param: ParamType, token?: CancellationToken) => Promise<ResultType>;
    getProgramFor(param: ParamType): IProgram;
    getSourceFileFor(param: ParamType, program: IProgram): ISourceFile;
    private waitForInitialization;
}
