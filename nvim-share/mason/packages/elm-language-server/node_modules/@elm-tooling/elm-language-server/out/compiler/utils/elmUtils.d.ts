import { CompletionItemKind } from "vscode-languageserver";
import { URI } from "vscode-uri";
import { IElmPackageCache } from "../elmPackageCache";
import { ElmProject } from "../program";
export declare function getEmptyTypes(): {
    markdown: string;
    name: string;
    symbolKind: CompletionItemKind;
}[];
export declare function solveDependencies(packageCache: IElmPackageCache, deps: ReadonlyMap<string, IConstraint>): Promise<ReadonlyMap<string, IVersion> | undefined>;
export interface IVersion {
    major: number;
    minor: number;
    patch: number;
    string: string;
}
export interface IConstraint {
    upper: IVersion;
    lower: IVersion;
    upperOperator: "<" | "<=";
    lowerOperator: "<" | "<=";
}
export declare function parseVersion(version: string): IVersion;
export declare function parseConstraint(contraint: string): IConstraint;
export declare function versionSatisfiesConstraint(version: IVersion, constraint: IConstraint): boolean;
export declare function constraintIntersect(a: IConstraint, b: IConstraint): IConstraint | undefined;
export declare function getModuleName(uri: string, sourceDir: string): string;
export declare function getModuleUri(moduleName: string, sourceDir: URI, project: ElmProject): URI;
export declare function flattenExposedModules(exposedModules: string[] | {
    [name: string]: string[];
}): string[];
export declare function nameIsKernel(name: string): boolean;
export declare function isKernelProject(project: ElmProject): boolean;
export declare function isCoreProject(project: ElmProject): boolean;
