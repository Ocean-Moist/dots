import { SyntaxNode, Tree } from "web-tree-sitter";
import { SyntaxNodeMap } from "./utils/syntaxNodeMap";
import { IExposing, SymbolMap } from "./binder";
import { Diagnostic } from "./diagnostics";
import { ElmProject } from "./program";
export interface ISourceFile {
    uri: string;
    writeable: boolean;
    maintainerAndPackageName?: string;
    tree: Tree;
    project: ElmProject;
    isTestFile: boolean;
    isDependency: boolean;
    parseDiagnostics: Diagnostic[];
    bindDiagnostics: Diagnostic[];
    moduleName?: string;
    resolvedModules?: Map<string, string>;
    exposing?: IExposing;
    symbolLinks?: SyntaxNodeMap<SyntaxNode, SymbolMap>;
    nonShadowableNames?: Set<string>;
    resolvedImports?: boolean;
}
export interface IKernelSourceFile {
    uri: string;
    maintainerAndPackageName: string;
    project: ElmProject;
    moduleName: string;
}
export interface IForest {
    readonly sourceFiles: Map<string, ISourceFile>;
    getTree(uri: string): Tree | undefined;
    getByUri(uri: string): ISourceFile | undefined;
    setSourceFile(uri: string, writeable: boolean, tree: Tree, isTestFile: boolean, isDependency: boolean, project?: ElmProject, maintainerAndPackageName?: string): ISourceFile;
    removeTree(uri: string): void;
    synchronize(): void;
    invalidateResolvedModules(): void;
    setKernelSourceFile(uri: string, project: ElmProject, maintainerAndPackageName: string, moduleName: string): IKernelSourceFile;
    getKernelSourceFile(uri: string): IKernelSourceFile | undefined;
}
export declare class Forest implements IForest {
    private rootProject;
    sourceFiles: Map<string, ISourceFile>;
    private kernelSourceFiles;
    constructor(rootProject: ElmProject);
    getTree(uri: string): Tree | undefined;
    getByUri(uri: string): ISourceFile | undefined;
    setSourceFile(uri: string, writeable: boolean, tree: Tree, isTestFile: boolean, isDependency: boolean, project?: ElmProject, maintainerAndPackageName?: string): ISourceFile;
    removeTree(uri: string): void;
    synchronize(): void;
    invalidateResolvedModules(): void;
    setKernelSourceFile(uri: string, project: ElmProject, maintainerAndPackageName: string, moduleName: string): IKernelSourceFile;
    getKernelSourceFile(uri: string): IKernelSourceFile | undefined;
    private resolveModules;
    private getModuleMap;
}
