"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_languageserver_1 = require("vscode-languageserver");
const __1 = require("..");
const refactorEditUtils_1 = require("../../util/refactorEditUtils");
const treeUtils_1 = require("../../util/treeUtils");
const diagnostics_1 = require("../../../compiler/diagnostics");
const utils_1 = require("../../util/utils");
const errorCodes = [diagnostics_1.Diagnostics.RecordField.code];
const fixId = "add_missing_record_field";
__1.CodeActionProvider.registerCodeAction({
    errorCodes,
    fixId,
    getCodeActions: (params) => {
        const edits = getEdits(params, params.range);
        if (Object.values(edits).some((edit) => edit.length > 0)) {
            const single = Object.values(edits).every((edit) => edit.length === 1);
            return [
                __1.CodeActionProvider.getCodeAction(params, `Create missing record ${single ? "field" : "fields"}`, edits),
            ];
        }
        return [];
    },
    getFixAllCodeAction: (params) => {
        return __1.CodeActionProvider.getFixAllCodeAction("Create all missing record fields", params, errorCodes, fixId, () => {
            // Not used
        }, (changes, diagnostic) => {
            utils_1.Utils.mergeChanges(changes, getEdits(params, diagnostic.range));
        });
    },
});
function getEdits(params, range) {
    const nodeAtPosition = treeUtils_1.TreeUtils.getNamedDescendantForRange(params.sourceFile, range);
    const nodeParent = nodeAtPosition.parent;
    if (nodeAtPosition.type === "lower_case_identifier" &&
        ((nodeParent === null || nodeParent === void 0 ? void 0 : nodeParent.type) === "field_access_expr" || (nodeParent === null || nodeParent === void 0 ? void 0 : nodeParent.type) === "field")) {
        const checker = params.program.getTypeChecker();
        const fieldName = nodeAtPosition.text;
        let target = nodeParent.type === "field_access_expr"
            ? nodeParent === null || nodeParent === void 0 ? void 0 : nodeParent.childForFieldName("target")
            : nodeParent.type === "field"
                ? nodeParent.parent
                : nodeAtPosition;
        // Adjust for parenthesis expr. Will need to change when we handle it better in inference
        if ((target === null || target === void 0 ? void 0 : target.type) === "parenthesized_expr") {
            target = target.namedChildren[0];
        }
        if (target) {
            const expectedType = checker.findType(nodeParent.type === "field_access_expr" ? nodeParent : nodeAtPosition);
            return createFields([[fieldName, expectedType]], target, checker, params.sourceFile);
        }
    }
    return {};
}
function createFields(fields, targetRecord, checker, sourceFile) {
    var _a, _b;
    const type = checker.findType(targetRecord);
    if (type.nodeType === "Record") {
        const fieldNames = Object.keys(type.fields);
        const lastFieldRef = treeUtils_1.TreeUtils.findFieldReference(type, fieldNames[fieldNames.length - 1]);
        if (lastFieldRef) {
            const useNewLine = ((_a = lastFieldRef.node.parent) === null || _a === void 0 ? void 0 : _a.startPosition.row) !==
                ((_b = lastFieldRef.node.parent) === null || _b === void 0 ? void 0 : _b.endPosition.row);
            const indendation = (0, refactorEditUtils_1.getSpaces)(lastFieldRef.node.startPosition.column - 2);
            const edits = fields.map(([fieldName, fieldType]) => {
                const typeString = checker.typeToString(fieldType, sourceFile);
                return vscode_languageserver_1.TextEdit.insert({
                    line: lastFieldRef === null || lastFieldRef === void 0 ? void 0 : lastFieldRef.node.endPosition.row,
                    character: lastFieldRef === null || lastFieldRef === void 0 ? void 0 : lastFieldRef.node.endPosition.column,
                }, `${useNewLine ? "\n" + indendation : ""}, ${fieldName} : ${typeString}`);
            });
            return { [lastFieldRef.node.tree.uri]: edits };
        }
    }
    return {};
}
//# sourceMappingURL=addMissingRecordFieldCodeAction.js.map