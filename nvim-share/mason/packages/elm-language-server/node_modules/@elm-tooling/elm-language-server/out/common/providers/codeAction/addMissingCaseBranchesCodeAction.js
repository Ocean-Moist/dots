"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_languageserver_1 = require("vscode-languageserver");
const __1 = require("..");
const refactorEditUtils_1 = require("../../util/refactorEditUtils");
const treeUtils_1 = require("../../util/treeUtils");
const diagnostics_1 = require("../../../compiler/diagnostics");
const utils_1 = require("../../util/utils");
const patternMatches_1 = require("../../../compiler/patternMatches");
const positionUtil_1 = require("../../positionUtil");
const errorCodes = [diagnostics_1.Diagnostics.IncompleteCasePattern(0).code];
const fixId = "add_missing_case_branches";
__1.CodeActionProvider.registerCodeAction({
    errorCodes,
    fixId,
    getCodeActions: (params) => {
        const edits = getEdits(params, params.range);
        return [
            __1.CodeActionProvider.getCodeAction(params, "Add missing case branches", edits),
        ];
    },
    getFixAllCodeAction: (params) => {
        return __1.CodeActionProvider.getFixAllCodeAction("Add all missing case branches", params, errorCodes, fixId, (edits, diagnostic) => {
            edits.push(...getEdits(params, diagnostic.range));
        });
    },
});
function getEdits(params, range) {
    var _a, _b;
    const nodeAtPosition = treeUtils_1.TreeUtils.getNamedDescendantForRange(params.sourceFile, range);
    if (nodeAtPosition.type === "case_of_expr") {
        const branches = nodeAtPosition.namedChildren.filter((n) => n.type === "case_of_branch");
        const patterns = branches
            .map((branch) => branch.childForFieldName("pattern"))
            .filter(utils_1.Utils.notUndefinedOrNull);
        const branchIndent = (0, refactorEditUtils_1.getSpaces)(branches[0].startPosition.column);
        const branchExprIndent = (0, refactorEditUtils_1.getSpaces)((_b = (_a = branches[0].childForFieldName("expr")) === null || _a === void 0 ? void 0 : _a.startPosition.column) !== null && _b !== void 0 ? _b : branches[0].startPosition.column + 4);
        const edit = patternMatches_1.PatternMatches.missing(patterns, params.program).reduce((edit, missing) => edit +
            `\n\n${branchIndent}${missing} ->\n${branchExprIndent}Debug.todo "branch '${missing}' not implemented"`, "");
        return [
            vscode_languageserver_1.TextEdit.insert(positionUtil_1.PositionUtil.FROM_TS_POSITION(nodeAtPosition.endPosition).toVSPosition(), edit),
        ];
    }
    return [];
}
//# sourceMappingURL=addMissingCaseBranchesCodeAction.js.map