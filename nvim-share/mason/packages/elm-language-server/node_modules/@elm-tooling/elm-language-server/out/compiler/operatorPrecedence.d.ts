import { Expression } from "./utils/expressionTree";
import { SyntaxNodeMap } from "./utils/syntaxNodeMap";
export type OperatorAssociativity = "LEFT" | "RIGHT" | "NON";
export interface IOperatorPrecedence {
    precedence: number;
    associativity: OperatorAssociativity;
}
export declare class BinaryExprTree {
    private static DEFAULT_PRECEDENCE;
    type: "Operand" | "Binary";
    constructor(type: "Operand" | "Binary");
    static parse(expression: Expression[], operatorPrecedences: SyntaxNodeMap<Expression, IOperatorPrecedence>): BinaryExprTree;
    private static parseExpression;
}
export declare class Operand extends BinaryExprTree {
    operand: Expression;
    constructor(operand: Expression);
}
export declare class Binary extends BinaryExprTree {
    left: BinaryExprTree;
    operator: Expression;
    right: BinaryExprTree;
    constructor(left: BinaryExprTree, operator: Expression, right: BinaryExprTree);
}
