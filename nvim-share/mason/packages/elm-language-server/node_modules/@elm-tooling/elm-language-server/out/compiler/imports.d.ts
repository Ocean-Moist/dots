import { SyntaxNode } from "web-tree-sitter";
import { ISourceFile } from "./forest";
import { Diagnostic } from "./diagnostics";
import { ISymbol } from "./binder";
import { IProgram } from "./program";
export declare let importsTime: number;
export declare function resetImportsTime(): void;
type FromModule = {
    name: string;
    uri: string;
    maintainerAndPackageName?: string;
};
export interface IImport extends ISymbol {
    fromModule: FromModule;
    importNode?: SyntaxNode;
}
/**
 * Imports class that extends a map to handle multiple named imports
 */
export declare class Imports {
    private vars;
    private types;
    private constructors;
    private modules;
    private diagnostics;
    private getFromMap;
    getVar(name: string, module?: string): IImport[];
    getType(name: string, module?: string): IImport[];
    getConstructor(name: string, module?: string): IImport[];
    getModule(name: string): IImport | undefined;
    getModules(): IImport[];
    forEach(callbackfn: (value: IImport) => void): void;
    getDiagnostics(): Diagnostic[];
    private static cachedVirtualImports;
    static getImports(sourceFile: ISourceFile, program: IProgram): Imports;
    static getVirtualImports(): SyntaxNode[];
    private static findImportAsClause;
}
export {};
