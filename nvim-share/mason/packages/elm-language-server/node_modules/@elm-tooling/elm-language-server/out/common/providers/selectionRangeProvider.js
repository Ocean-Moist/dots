"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectionRangeProvider = void 0;
const tsyringe_1 = require("tsyringe");
const vscode_uri_1 = require("vscode-uri");
const positionUtil_1 = require("../positionUtil");
const elmWorkspaceMatcher_1 = require("../util/elmWorkspaceMatcher");
const treeUtils_1 = require("../util/treeUtils");
class SelectionRangeProvider {
    constructor() {
        this.handleSelectionRangeRequest = (params) => {
            this.connection.console.info(`Selection Ranges were requested`);
            const ret = [];
            const tree = params.sourceFile.tree;
            params.positions.forEach((position) => {
                const nodeAtPosition = treeUtils_1.TreeUtils.getNamedDescendantForPosition(tree.rootNode, position);
                const newRange = {
                    start: positionUtil_1.PositionUtil.FROM_TS_POSITION(nodeAtPosition.startPosition).toVSPosition(),
                    end: positionUtil_1.PositionUtil.FROM_TS_POSITION(nodeAtPosition.endPosition).toVSPosition(),
                };
                ret.push({
                    range: newRange,
                    parent: this.getParentNode(nodeAtPosition, newRange),
                });
            });
            return ret ? ret : null;
        };
        this.connection = tsyringe_1.container.resolve("Connection");
        this.connection.onSelectionRanges(new elmWorkspaceMatcher_1.ElmWorkspaceMatcher((param) => vscode_uri_1.URI.parse(param.textDocument.uri)).handle(this.handleSelectionRangeRequest.bind(this)));
    }
    getParentNode(node, previousRange) {
        if (node.parent) {
            const newRange = {
                start: positionUtil_1.PositionUtil.FROM_TS_POSITION(node.parent.startPosition).toVSPosition(),
                end: positionUtil_1.PositionUtil.FROM_TS_POSITION(node.parent.endPosition).toVSPosition(),
            };
            if (previousRange.start.line === newRange.start.line &&
                previousRange.start.character === newRange.start.character &&
                previousRange.end.line === newRange.end.line &&
                previousRange.end.character === newRange.end.character) {
                // Skip ranges that match
                return this.getParentNode(node.parent, previousRange);
            }
            else {
                return {
                    range: newRange,
                    parent: this.getParentNode(node.parent, newRange),
                };
            }
        }
    }
}
exports.SelectionRangeProvider = SelectionRangeProvider;
//# sourceMappingURL=selectionRangeProvider.js.map