"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReferencesProvider = void 0;
const tsyringe_1 = require("tsyringe");
const vscode_languageserver_1 = require("vscode-languageserver");
const vscode_uri_1 = require("vscode-uri");
const references_1 = require("../../compiler/references");
const elmWorkspaceMatcher_1 = require("../util/elmWorkspaceMatcher");
const treeUtils_1 = require("../util/treeUtils");
class ReferencesProvider {
    constructor() {
        this.handleReferencesRequest = (params) => {
            this.connection.console.info(`References were requested`);
            const checker = params.program.getTypeChecker();
            const sourceFile = params.sourceFile;
            if (sourceFile) {
                const nodeAtPosition = treeUtils_1.TreeUtils.getNamedDescendantForPosition(sourceFile.tree.rootNode, params.position);
                const definitionNode = checker.findDefinition(nodeAtPosition, sourceFile).symbol;
                const references = references_1.References.find(definitionNode, params.program);
                if (references) {
                    return references.map((a) => vscode_languageserver_1.Location.create(a.uri, vscode_languageserver_1.Range.create(vscode_languageserver_1.Position.create(a.node.startPosition.row, a.node.startPosition.column), vscode_languageserver_1.Position.create(a.node.endPosition.row, a.node.endPosition.column))));
                }
            }
            return undefined;
        };
        this.connection = tsyringe_1.container.resolve("Connection");
        this.connection.onReferences(new elmWorkspaceMatcher_1.ElmWorkspaceMatcher((param) => vscode_uri_1.URI.parse(param.textDocument.uri)).handle(this.handleReferencesRequest.bind(this)));
    }
}
exports.ReferencesProvider = ReferencesProvider;
//# sourceMappingURL=referencesProvider.js.map