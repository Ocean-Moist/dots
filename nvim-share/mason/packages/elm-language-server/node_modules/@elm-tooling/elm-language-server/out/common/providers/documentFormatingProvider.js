"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentFormattingProvider = void 0;
const tsyringe_1 = require("tsyringe");
const vscode_uri_1 = require("vscode-uri");
const _1 = require(".");
const diff_1 = require("../util/diff");
const elmWorkspaceMatcher_1 = require("../util/elmWorkspaceMatcher");
const textDocumentEvents_1 = require("../util/textDocumentEvents");
let DocumentFormattingProvider = class DocumentFormattingProvider {
    constructor(host) {
        this.host = host;
        this.handleFormattingRequest = (params) => __awaiter(this, void 0, void 0, function* () {
            this.connection.console.info(`Formatting was requested`);
            try {
                const text = this.events.get(params.textDocument.uri);
                if (!text) {
                    this.connection.console.error("Can't find file for formatting.");
                    return;
                }
                const settings = yield this.settings.getClientSettings();
                return (0, diff_1.formatText)(params.program.getRootPath(), settings.elmFormatPath, text.getText(), this.host);
            }
            catch (error) {
                this.connection.console.warn(JSON.stringify(error));
                if (error instanceof Error &&
                    (error === null || error === void 0 ? void 0 : error.message) &&
                    (error.message.includes("SYNTAX PROBLEM") || //Elm-format 0.8.4 and below
                        error.message.includes("Unable to parse file")) //Elm-format 0.8.5 and above
                ) {
                    this.connection.window.showErrorMessage("Running elm-format failed. Check the file for syntax errors.");
                }
            }
        });
        this.settings = tsyringe_1.container.resolve("Settings");
        this.connection = tsyringe_1.container.resolve("Connection");
        this.events = tsyringe_1.container.resolve(textDocumentEvents_1.TextDocumentEvents);
        this.diagnostics = tsyringe_1.container.resolve(_1.DiagnosticsProvider);
        if (host.execCmdSync) {
            this.connection.onDocumentFormatting(this.diagnostics.interruptDiagnostics(() => new elmWorkspaceMatcher_1.ElmWorkspaceMatcher((params) => vscode_uri_1.URI.parse(params.textDocument.uri)).handle(this.handleFormattingRequest)));
        }
    }
};
exports.DocumentFormattingProvider = DocumentFormattingProvider;
exports.DocumentFormattingProvider = DocumentFormattingProvider = __decorate([
    (0, tsyringe_1.injectable)(),
    __metadata("design:paramtypes", [Object])
], DocumentFormattingProvider);
//# sourceMappingURL=documentFormatingProvider.js.map