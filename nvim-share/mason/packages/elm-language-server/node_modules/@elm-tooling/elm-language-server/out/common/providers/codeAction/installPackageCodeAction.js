"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const tsyringe_1 = require("tsyringe");
const vscode_uri_1 = require("vscode-uri");
const commandManager_1 = require("../../commandManager");
const elmPackageCache_1 = require("../../../compiler/elmPackageCache");
const elmWorkspaceMatcher_1 = require("../../util/elmWorkspaceMatcher");
const treeUtils_1 = require("../../util/treeUtils");
const diagnostics_1 = require("../../../compiler/diagnostics");
const codeActionProvider_1 = require("../codeActionProvider");
const ranking_1 = require("../ranking");
const errorCodes = [diagnostics_1.Diagnostics.ImportMissing.code];
const fixId = "install_package";
const random = Math.random();
const commandName = `elm.installPackage-${random}`;
function register(host) {
    if (!host.execCmdSync) {
        return;
    }
    codeActionProvider_1.CodeActionProvider.registerCodeAction({
        errorCodes,
        fixId,
        getCodeActions: (params) => {
            const valueNode = treeUtils_1.TreeUtils.getNamedDescendantForRange(params.sourceFile, params.range);
            const packages = elmPackageCache_1.ElmPackageCache.getPackagesWithModule(valueNode.text);
            return packages.sort(ranking_1.comparePackageRanking).map((packageName) => codeActionProvider_1.CodeActionProvider.getCodeAction(params, `Install package "${packageName}"`, [], {
                command: commandName,
                title: "Install Package",
                arguments: [params.sourceFile.uri, packageName],
            }));
        },
        getFixAllCodeAction: () => {
            // We can't run multiple commands
            return undefined;
        },
    });
    commandManager_1.CommandManager.register(commandName, (uri, packageName) => __awaiter(this, void 0, void 0, function* () {
        const settings = tsyringe_1.container.resolve("Settings");
        const connection = tsyringe_1.container.resolve("Connection");
        const program = new elmWorkspaceMatcher_1.ElmWorkspaceMatcher((uri) => vscode_uri_1.URI.parse(uri)).getProgramFor(uri);
        const clientSettings = yield settings.getClientSettings();
        try {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            host.execCmdSync(clientSettings.elmPath, "elm", { cmdArguments: ["install", packageName] }, program.getRootPath().fsPath, clientSettings.skipInstallPackageConfirmation ? "y\n" : undefined);
        }
        catch (e) {
            if (clientSettings.skipInstallPackageConfirmation) {
                return;
            }
            const result = e;
            const message = result.stdout.replace("[Y/n]:", "").trim();
            connection.window
                .showInformationMessage(message, { title: "Yes", value: "y" }, { title: "No", value: "n" })
                .then((choice) => {
                if (choice) {
                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                    const cmdResult = host.execCmdSync(clientSettings.elmPath, "elm", { cmdArguments: ["install", packageName] }, program.getRootPath().fsPath, `${choice.value}\n`);
                    const message = cmdResult.stdout
                        .replace(result.stdout, "")
                        .trim();
                    connection.window.showInformationMessage(message);
                }
            })
                .catch((e) => {
                connection.console.warn(e);
            });
        }
    }));
}
exports.register = register;
//# sourceMappingURL=installPackageCodeAction.js.map