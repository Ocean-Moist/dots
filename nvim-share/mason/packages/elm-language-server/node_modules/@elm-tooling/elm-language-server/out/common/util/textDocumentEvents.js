"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextDocumentEvents = void 0;
const tsyringe_1 = require("tsyringe");
const vscode_languageserver_1 = require("vscode-languageserver");
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
// This is loosely based on https://github.com/Microsoft/vscode-languageserver-node/blob/73180893ca/server/src/main.ts#L124
// With some simplifications and the ability to support multiple listeners
class TextDocumentEvents {
    constructor() {
        // a single store of documents shared by all workspaces
        this._documents = {};
        this._configuration = vscode_languageserver_textdocument_1.TextDocument;
        const events = tsyringe_1.container.resolve("DocumentEvents");
        this._onDidChange = new vscode_languageserver_1.Emitter();
        this._onDidOpen = new vscode_languageserver_1.Emitter();
        this._onDidClose = new vscode_languageserver_1.Emitter();
        this._onDidSave = new vscode_languageserver_1.Emitter();
        events.onDidOpen((params) => {
            const td = params.textDocument;
            const document = this._configuration.create(td.uri, td.languageId, td.version, td.text);
            this._documents[params.textDocument.uri] = document;
            this._onDidOpen.fire(params);
        });
        events.onDidChange((params) => {
            const td = params.textDocument;
            const changes = params.contentChanges;
            if (changes.length === 0) {
                return;
            }
            let document = this._documents[td.uri];
            const { version } = td;
            if (version === null || version === void 0) {
                throw new Error(`Received document change event for ${td.uri} without valid version identifier`);
            }
            document = this._configuration.update(document, changes, version);
            this._documents[td.uri] = document;
            this._onDidChange.fire(params);
        });
        events.onDidSave((params) => {
            const document = this._documents[params.textDocument.uri];
            if (document) {
                this._onDidSave.fire(params);
            }
        });
        events.onDidClose((params) => {
            const document = this._documents[params.textDocument.uri];
            if (document) {
                delete this._documents[params.textDocument.uri];
                this._onDidClose.fire(params);
            }
        });
    }
    get onDidChange() {
        return this._onDidChange.event;
    }
    get onDidOpen() {
        return this._onDidOpen.event;
    }
    get onDidClose() {
        return this._onDidClose.event;
    }
    get onDidSave() {
        return this._onDidSave.event;
    }
    /**
     * Returns the document for the given URI. Returns undefined if
     * the document is not managed by this instance.
     *
     * @param uri The text document's URI to retrieve.
     * @return the text document or `undefined`.
     */
    get(uri) {
        return this._documents[uri];
    }
    getOpenUris() {
        return Object.keys(this._documents);
    }
}
exports.TextDocumentEvents = TextDocumentEvents;
//# sourceMappingURL=textDocumentEvents.js.map