import { DiagnosticSeverity, DiagnosticTag, Range } from "vscode-languageserver";
import { SyntaxNode } from "web-tree-sitter";
import { DiagnosticSource } from "../common/providers/diagnostics/diagnosticSource";
export interface Diagnostic {
    code: string;
    message: string;
    source: DiagnosticSource;
    severity: DiagnosticSeverity;
    range: Range;
    uri: string;
    tags?: DiagnosticTag[];
}
export declare function errorWithEndNode(node: SyntaxNode, diagnostic: IDiagnosticMessage, endNode?: SyntaxNode, ...args: (string | number)[]): Diagnostic;
export declare function error(node: SyntaxNode, diagnostic: IDiagnosticMessage, ...args: (string | number)[]): Diagnostic;
export interface IDiagnosticMessage {
    code: string;
    message: string;
    severity: DiagnosticSeverity;
}
export declare const Diagnostics: {
    AmbiguousType: IDiagnosticMessage;
    AmbiguousVar: IDiagnosticMessage;
    AmbiguousVariant: IDiagnosticMessage;
    ArgumentCount: IDiagnosticMessage;
    CyclicDefinition: IDiagnosticMessage;
    ExportNotFound: IDiagnosticMessage;
    ExportOpenAlias: IDiagnosticMessage;
    FieldAccessOnNonRecord: IDiagnosticMessage;
    General: IDiagnosticMessage;
    ImportExposingNotFound: IDiagnosticMessage;
    ImportMissing: IDiagnosticMessage;
    ImportOpenAlias: IDiagnosticMessage;
    IncompleteCasePattern: (n: number) => IDiagnosticMessage;
    InvalidPattern: IDiagnosticMessage;
    MissingTypeAnnotation: IDiagnosticMessage;
    MissingValue: IDiagnosticMessage;
    NonAssociativeOperator: IDiagnosticMessage;
    ParameterCountError: IDiagnosticMessage;
    Parsing: IDiagnosticMessage;
    PartialPattern: IDiagnosticMessage;
    RecordBaseId: IDiagnosticMessage;
    RecordField: IDiagnosticMessage;
    RecursiveAlias: (n: number) => IDiagnosticMessage;
    RecursiveDeclaration: (n: number) => IDiagnosticMessage;
    RecursiveLet: (n: number) => IDiagnosticMessage;
    Redefinition: IDiagnosticMessage;
    RedundantPattern: IDiagnosticMessage;
    TypeArgumentCount: IDiagnosticMessage;
    TypeMismatch: IDiagnosticMessage;
};
