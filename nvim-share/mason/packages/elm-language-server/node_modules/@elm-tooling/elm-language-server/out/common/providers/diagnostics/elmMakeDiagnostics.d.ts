import { CodeAction, CodeActionParams } from "vscode-languageserver";
import { ISourceFile } from "../../../compiler/forest";
import { IDiagnostic } from "./diagnosticsProvider";
import { IFileSystemHost } from "../../types";
export declare const NAMING_ERROR = "NAMING ERROR";
export declare const CODE_ACTION_ELM_MAKE: string;
export interface IElmCompilerError {
    type: string;
    errors: IError[];
}
export interface IElmError {
    title: string;
    type: string;
    path: string;
    message: (string | IStyledString)[];
}
export interface IError {
    path: string | null;
    name: string;
    problems: IProblem[];
}
export interface IProblem {
    title: string;
    region: {
        start: {
            line: number;
            column: number;
        };
        end: {
            line: number;
            column: number;
        };
    };
    message: (string | IStyledString)[];
}
export interface IStyledString {
    bold: boolean;
    underline: boolean;
    color: string;
    string: string;
}
export declare class ElmMakeDiagnostics {
    private host;
    private elmWorkspaceMatcher;
    private settings;
    private connection;
    constructor(host: IFileSystemHost);
    canRun: (sourceFile: ISourceFile) => boolean;
    createDiagnostics: (sourceFile: ISourceFile) => Promise<Map<string, IDiagnostic[]>>;
    onCodeAction(params: CodeActionParams): CodeAction[];
    private hasType;
    private convertDiagnosticsToCodeActions;
    private createQuickFix;
    private filterElmMakeDiagnostics;
    private checkForErrors;
    private checkIfVersionMismatchesAndCreateMessage;
    private getUrisReferencedByEntrypoints;
}
