"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExposeUnexposeHandler = void 0;
const tsyringe_1 = require("tsyringe");
const vscode_uri_1 = require("vscode-uri");
const protocol_1 = require("../../protocol");
const elmWorkspaceMatcher_1 = require("../../util/elmWorkspaceMatcher");
const refactorEditUtils_1 = require("../../util/refactorEditUtils");
class ExposeUnexposeHandler {
    constructor() {
        this.connection = tsyringe_1.container.resolve("Connection");
        this.connection.onRequest(protocol_1.ExposeRequest, new elmWorkspaceMatcher_1.ElmWorkspaceMatcher((params) => vscode_uri_1.URI.parse(params.uri)).handle(this.handleExposeRequest.bind(this)));
        this.connection.onRequest(protocol_1.UnexposeRequest, new elmWorkspaceMatcher_1.ElmWorkspaceMatcher((params) => vscode_uri_1.URI.parse(params.uri)).handle(this.handleUnexposeRequest.bind(this)));
    }
    handleExposeRequest(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const tree = params.sourceFile.tree;
            if (tree) {
                const edits = refactorEditUtils_1.RefactorEditUtils.exposeValueInModule(tree, params.name);
                if (edits) {
                    yield this.connection.workspace.applyEdit({
                        changes: {
                            [params.uri]: [edits],
                        },
                    });
                }
            }
        });
    }
    handleUnexposeRequest(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const tree = params.sourceFile.tree;
            if (tree) {
                const edits = refactorEditUtils_1.RefactorEditUtils.unexposedValueInModule(tree, params.name);
                if (edits) {
                    yield this.connection.workspace.applyEdit({
                        changes: {
                            [params.uri]: [edits],
                        },
                    });
                }
            }
        });
    }
}
exports.ExposeUnexposeHandler = ExposeUnexposeHandler;
//# sourceMappingURL=exposeUnexposeHandler.js.map