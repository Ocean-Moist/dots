#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startLanguageServer = void 0;
const node_1 = require("vscode-languageserver/node");
const common_1 = require("../common");
const cancellation_1 = require("./cancellation");
const fileSystem_1 = require("./fileSystem");
// Show version for `-v` or `--version` arguments
if (process.argv[2] === "-v" || process.argv[2] === "--version") {
    // require is used to avoid loading package if not necessary (~30ms time difference)
    process.stdout.write(`${require("pjson").version}\n`);
    process.exit(0);
}
startLanguageServer();
function startLanguageServer() {
    // default argument `--stdio`
    if (process.argv.length === 2) {
        process.argv.push("--stdio");
    }
    const connection = (0, node_1.createConnection)(node_1.ProposedFeatures.all, {
        cancellationStrategy: (0, cancellation_1.getCancellationStrategyFromArgv)(process.argv),
    });
    (0, common_1.startCommonServer)(connection, (0, fileSystem_1.createNodeFileSystemHost)(connection));
    // Don't die on unhandled Promise rejections
    process.on("unhandledRejection", (reason, p) => {
        connection.console.error(`Unhandled Rejection at: Promise ${p} reason:, ${reason}`);
    });
}
exports.startLanguageServer = startLanguageServer;
//# sourceMappingURL=index.js.map