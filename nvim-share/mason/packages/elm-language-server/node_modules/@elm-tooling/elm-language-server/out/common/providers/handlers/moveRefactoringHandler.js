"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MoveRefactoringHandler = void 0;
const tsyringe_1 = require("tsyringe");
const vscode_languageserver_1 = require("vscode-languageserver");
const vscode_uri_1 = require("vscode-uri");
const protocol_1 = require("../../protocol");
const elmWorkspaceMatcher_1 = require("../../util/elmWorkspaceMatcher");
const refactorEditUtils_1 = require("../../util/refactorEditUtils");
const references_1 = require("../../../compiler/references");
const treeUtils_1 = require("../../util/treeUtils");
const path = __importStar(require("path"));
class MoveRefactoringHandler {
    constructor() {
        this.connection = tsyringe_1.container.resolve("Connection");
        this.connection.onRequest(protocol_1.GetMoveDestinationRequest, new elmWorkspaceMatcher_1.ElmWorkspaceMatcher((param) => vscode_uri_1.URI.parse(param.sourceUri)).handle(this.handleGetMoveDestinationsRequest.bind(this)));
        this.connection.onRequest(protocol_1.MoveRequest, new elmWorkspaceMatcher_1.ElmWorkspaceMatcher((param) => vscode_uri_1.URI.parse(param.sourceUri)).handle(this.handleMoveRequest.bind(this)));
    }
    handleGetMoveDestinationsRequest(params) {
        const destinations = params.program
            .getSourceFiles()
            .filter((tree) => tree.writeable && tree.uri !== params.sourceUri)
            .map((tree) => {
            let uri = vscode_uri_1.URI.parse(tree.uri).fsPath;
            const rootPath = params.program.getRootPath().fsPath;
            uri = uri.slice(rootPath.length + 1);
            const index = uri.lastIndexOf(path.sep);
            return {
                name: uri.slice(index + 1),
                path: uri.slice(0, index),
                uri: tree.uri,
            };
        });
        return {
            destinations,
        };
    }
    handleMoveRequest(params) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        return __awaiter(this, void 0, void 0, function* () {
            if (!params.destination) {
                return;
            }
            const tree = (_a = params.program.getSourceFile(params.sourceUri)) === null || _a === void 0 ? void 0 : _a.tree;
            const destinationTree = (_b = params.program.getSourceFile(params.destination.uri)) === null || _b === void 0 ? void 0 : _b.tree;
            if (tree && destinationTree) {
                const nodeAtPosition = treeUtils_1.TreeUtils.getNamedDescendantForPosition(tree.rootNode, params.params.range.start);
                const isTypeNode = ((_c = nodeAtPosition.parent) === null || _c === void 0 ? void 0 : _c.type) === "type_annotation";
                const isDeclarationNode = ((_e = (_d = nodeAtPosition.parent) === null || _d === void 0 ? void 0 : _d.parent) === null || _e === void 0 ? void 0 : _e.type) === "value_declaration";
                const typeNode = isDeclarationNode
                    ? ((_h = (_g = (_f = nodeAtPosition.parent) === null || _f === void 0 ? void 0 : _f.parent) === null || _g === void 0 ? void 0 : _g.previousNamedSibling) === null || _h === void 0 ? void 0 : _h.type) ===
                        "type_annotation"
                        ? (_k = (_j = nodeAtPosition.parent) === null || _j === void 0 ? void 0 : _j.parent) === null || _k === void 0 ? void 0 : _k.previousNamedSibling
                        : undefined
                    : isTypeNode
                        ? nodeAtPosition.parent
                        : undefined;
                const declarationNode = isDeclarationNode
                    ? (_l = nodeAtPosition.parent) === null || _l === void 0 ? void 0 : _l.parent
                    : isTypeNode
                        ? (_m = nodeAtPosition.parent) === null || _m === void 0 ? void 0 : _m.nextNamedSibling
                        : undefined;
                const commentNode = ((_o = typeNode === null || typeNode === void 0 ? void 0 : typeNode.previousNamedSibling) === null || _o === void 0 ? void 0 : _o.type) === "block_comment"
                    ? typeNode.previousNamedSibling
                    : ((_p = declarationNode === null || declarationNode === void 0 ? void 0 : declarationNode.previousNamedSibling) === null || _p === void 0 ? void 0 : _p.type) === "block_comment"
                        ? declarationNode.previousNamedSibling
                        : undefined;
                const functionName = nodeAtPosition.text;
                const moduleName = (_q = treeUtils_1.TreeUtils.getModuleNameNode(tree)) === null || _q === void 0 ? void 0 : _q.text;
                const destinationModuleName = (_r = treeUtils_1.TreeUtils.getModuleNameNode(destinationTree)) === null || _r === void 0 ? void 0 : _r.text;
                if (declarationNode &&
                    functionName &&
                    moduleName &&
                    destinationModuleName) {
                    const startPosition = (_t = (_s = commentNode === null || commentNode === void 0 ? void 0 : commentNode.startPosition) !== null && _s !== void 0 ? _s : typeNode === null || typeNode === void 0 ? void 0 : typeNode.startPosition) !== null && _t !== void 0 ? _t : declarationNode.startPosition;
                    const endPosition = declarationNode.endPosition;
                    const comment = commentNode ? `${commentNode.text}\n` : "";
                    const type = typeNode ? `${typeNode.text}\n` : "";
                    const functionText = `\n\n${comment}${type}${declarationNode.text}`;
                    const changes = {};
                    changes[params.sourceUri] = [];
                    changes[params.destination.uri] = [];
                    // Remove from source
                    changes[params.sourceUri].push(vscode_languageserver_1.TextEdit.del(vscode_languageserver_1.Range.create(vscode_languageserver_1.Position.create(startPosition.row, startPosition.column), vscode_languageserver_1.Position.create(endPosition.row, endPosition.column))));
                    // Add to destination
                    changes[params.destination.uri].push(vscode_languageserver_1.TextEdit.insert(vscode_languageserver_1.Position.create(destinationTree.rootNode.endPosition.row + 1, 0), functionText));
                    // Update references
                    const references = references_1.References.find({
                        name: declarationNode.text,
                        node: declarationNode,
                        type: "Function",
                    }, params.program).map((ref) => {
                        return Object.assign(Object.assign({}, ref), { fullyQualified: treeUtils_1.TreeUtils.isReferenceFullyQualified(ref.node) });
                    });
                    const sourceHasReference = !!references.find((ref) => {
                        var _a, _b, _c;
                        return ref.uri === params.sourceUri &&
                            ((_a = ref.node.parent) === null || _a === void 0 ? void 0 : _a.text) !== (typeNode === null || typeNode === void 0 ? void 0 : typeNode.text) &&
                            ((_c = (_b = ref.node.parent) === null || _b === void 0 ? void 0 : _b.parent) === null || _c === void 0 ? void 0 : _c.text) !== (declarationNode === null || declarationNode === void 0 ? void 0 : declarationNode.text) &&
                            ref.node.type !== "exposed_value";
                    });
                    const referenceUris = new Set(references.map((ref) => ref.uri));
                    // Unexpose function in the source file if it is
                    const unexposeEdit = refactorEditUtils_1.RefactorEditUtils.unexposedValueInModule(tree, functionName);
                    if (unexposeEdit) {
                        changes[params.sourceUri].push(unexposeEdit);
                    }
                    // Remove old imports to the old source file from all reference uris
                    referenceUris.forEach((refUri) => {
                        var _a, _b;
                        if (!changes[refUri]) {
                            changes[refUri] = [];
                        }
                        const refTree = (_a = params.program.getSourceFile(refUri)) === null || _a === void 0 ? void 0 : _a.tree;
                        if (refTree && ((_b = params.destination) === null || _b === void 0 ? void 0 : _b.name)) {
                            const removeImportEdit = refactorEditUtils_1.RefactorEditUtils.removeValueFromImport(refTree, moduleName, functionName);
                            if (removeImportEdit) {
                                changes[refUri].push(removeImportEdit);
                            }
                        }
                    });
                    // Expose function in destination file if there are external references
                    if (references.filter((ref) => { var _a; return ref.uri !== ((_a = params.destination) === null || _a === void 0 ? void 0 : _a.uri) && !ref.fullyQualified; }).length > 0) {
                        const exposeEdit = refactorEditUtils_1.RefactorEditUtils.exposeValueInModule(destinationTree, functionName);
                        if (exposeEdit) {
                            changes[params.destination.uri].push(exposeEdit);
                        }
                    }
                    // Change the module name of every reference that is fully qualified
                    references.forEach((ref) => {
                        var _a;
                        if (ref.fullyQualified) {
                            if (ref.uri !== ((_a = params.destination) === null || _a === void 0 ? void 0 : _a.uri)) {
                                const edit = refactorEditUtils_1.RefactorEditUtils.changeQualifiedReferenceModule(ref.node, destinationModuleName);
                                if (edit) {
                                    changes[ref.uri].push(edit);
                                }
                            }
                            else {
                                // Remove the qualified references altogether on the destination file
                                const edit = refactorEditUtils_1.RefactorEditUtils.removeQualifiedReference(ref.node);
                                if (edit) {
                                    changes[ref.uri].push(edit);
                                }
                            }
                        }
                    });
                    // We don't want the destination file in the remaining edits
                    referenceUris.delete(params.destination.uri);
                    // Add the new imports for each file with a reference
                    referenceUris.forEach((refUri) => {
                        var _a;
                        if (refUri === params.sourceUri && !sourceHasReference) {
                            return;
                        }
                        const needToExpose = references
                            .filter((ref) => ref.uri === refUri)
                            .some((ref) => !ref.fullyQualified);
                        const refTree = (_a = params.program.getSourceFile(refUri)) === null || _a === void 0 ? void 0 : _a.tree;
                        if (refTree) {
                            const importEdit = refactorEditUtils_1.RefactorEditUtils.addImport(refTree, destinationModuleName, needToExpose ? functionName : undefined);
                            if (importEdit) {
                                changes[refUri].push(importEdit);
                            }
                        }
                    });
                    yield this.connection.workspace.applyEdit({ changes });
                }
            }
        });
    }
}
exports.MoveRefactoringHandler = MoveRefactoringHandler;
//# sourceMappingURL=moveRefactoringHandler.js.map