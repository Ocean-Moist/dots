import { CodeActionParams, RequestType } from "vscode-languageserver";
import { IParams } from "./util/elmWorkspaceMatcher";
export declare const GetMoveDestinationRequest: RequestType<IMoveParams, IMoveDestinationsResponse, void>;
export declare const MoveRequest: RequestType<IMoveParams, void, void>;
export interface IMoveParams extends IParams {
    sourceUri: string;
    params: CodeActionParams;
    destination?: IMoveDestination;
}
export interface IMoveDestinationsResponse {
    destinations: IMoveDestination[];
}
export interface IMoveDestination {
    name: string;
    path: string;
    uri: string;
}
export declare const ExposeRequest: RequestType<IExposeUnexposeParams, void, void>;
export interface IExposeUnexposeParams extends IParams {
    uri: string;
    name: string;
}
export declare const UnexposeRequest: RequestType<IExposeUnexposeParams, void, void>;
export interface IGetDiagnosticsParams {
    files: string[];
    delay: number;
}
export declare const GetDiagnosticsRequest: RequestType<IGetDiagnosticsParams, void, void>;
export declare const FindTestsRequest: RequestType<IFindTestsParams, IFindTestsResponse, void>;
export interface IFindTestsParams {
    projectFolder: string;
}
export interface IFindTestsResponse {
    suites?: TestSuite[];
}
export type TestSuite = {
    label: string;
    tests?: TestSuite[];
    file: string;
    position: {
        line: number;
        character: number;
    };
};
export declare const ReadFileRequest: RequestType<string, number[], void>;
export declare const ReadDirectoryRequest: RequestType<string, string[], void>;
export declare const ProvideFileContentsRequest: RequestType<{
    uri: string;
}, string, void>;
