import { SyntaxNode } from "web-tree-sitter";
import { InferenceResult } from "./typeInference";
type CacheKey = "PACKAGE_TYPE_ANNOTATION" | "PACKAGE_TYPE_AND_TYPE_ALIAS" | "PACKAGE_VALUE_DECLARATION" | "PACKAGE_UNION_VARIANT" | "PROJECT_TYPE_ANNOTATION" | "PROJECT_TYPE_AND_TYPE_ALIAS" | "PROJECT_VALUE_DECLARATION" | "PROJECT_UNION_VARIANT";
export declare class TypeCache {
    private packageTypeAnnotation;
    private packageTypeAndTypeAlias;
    private packageValueDeclaration;
    private packageUnionVariant;
    private projectTypeAnnotation;
    private projectTypeAndTypeAlias;
    private projectValueDeclaration;
    private projectUnionVariant;
    private declarationAnnotations;
    private typeUnionVariants;
    constructor();
    getOrSet(key: CacheKey, node: SyntaxNode, setter: () => InferenceResult): InferenceResult;
    invalidateProject(): void;
    invalidateValueDeclaration(node: SyntaxNode): void;
    invalidateTypeAnnotation(node: SyntaxNode): void;
    invalidateTypeOrTypeAlias(node: SyntaxNode): void;
    /**
     * Track a type annotation
     *
     * We associate type annotations with its top level declaration
     * so we can clear its cache when we invalidate that declaration
     */
    trackTypeAnnotation(annotation: SyntaxNode): void;
    trackUnionVariant(unionVariant: SyntaxNode): void;
}
export {};
