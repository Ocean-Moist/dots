"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readFileWithCachedVirtualPackageFile = exports.isVirtualPackageFile = exports.virtualPackagesRoot = exports.convertToFileSystemUri = exports.startCommonServer = void 0;
const Path = __importStar(require("path"));
require("reflect-metadata");
const tsyringe_1 = require("tsyringe"); //must be after reflect-metadata
const web_tree_sitter_1 = __importDefault(require("web-tree-sitter"));
const capabilityCalculator_1 = require("./capabilityCalculator");
const providers_1 = require("./providers");
const elmAnalyseJsonService_1 = require("./providers/diagnostics/elmAnalyseJsonService");
const documentEvents_1 = require("./util/documentEvents");
const settings_1 = require("./util/settings");
const textDocumentEvents_1 = require("./util/textDocumentEvents");
const vscode_uri_1 = require("vscode-uri");
const directories_1 = require("../directories");
function startCommonServer(connection, fileSystemHost) {
    // Composition root - be aware, there are some register calls that need to be done later
    tsyringe_1.container.register("Connection", {
        useValue: connection,
    });
    tsyringe_1.container.registerSingleton("Parser", web_tree_sitter_1.default);
    tsyringe_1.container.registerSingleton("DocumentEvents", documentEvents_1.DocumentEvents);
    tsyringe_1.container.registerSingleton("ElmAnalyseJsonService", elmAnalyseJsonService_1.ElmAnalyseJsonService);
    tsyringe_1.container.register(textDocumentEvents_1.TextDocumentEvents, {
        useValue: new textDocumentEvents_1.TextDocumentEvents(),
    });
    let server;
    let initSuccessfull = false;
    connection.onInitialize((params) => __awaiter(this, void 0, void 0, function* () {
        var _a, _b;
        const initializationOptions = (_a = params.initializationOptions) !== null && _a !== void 0 ? _a : {};
        const options = initializationOptions.treeSitterWasmUri
            ? {
                locateFile() {
                    return initializationOptions.treeSitterWasmUri;
                },
            }
            : undefined;
        yield web_tree_sitter_1.default.init(options);
        const pathToWasm = (_b = initializationOptions.treeSitterElmWasmUri) !== null && _b !== void 0 ? _b : Path.relative(process.cwd(), Path.join(directories_1.outDir, "tree-sitter-elm.wasm"));
        connection.console.info(`Loading Elm tree-sitter syntax from ${pathToWasm}`);
        const language = yield web_tree_sitter_1.default.Language.load(pathToWasm);
        const parser = tsyringe_1.container.resolve("Parser");
        parser.setLanguage(language);
        tsyringe_1.container.register(capabilityCalculator_1.CapabilityCalculator, {
            useValue: new capabilityCalculator_1.CapabilityCalculator(params.capabilities),
        });
        tsyringe_1.container.register("Settings", {
            useValue: new settings_1.Settings(initializationOptions, params.capabilities),
        });
        const { Server } = yield Promise.resolve().then(() => __importStar(require("./server")));
        server = new Server(params, fileSystemHost, initializationOptions);
        initSuccessfull = server.initSuccessfull.valueOf();
        if (!initSuccessfull) {
            connection.console.info("Server initialization failed");
            return {
                capabilities: {},
            };
        }
        tsyringe_1.container.register(providers_1.ASTProvider, {
            useValue: new providers_1.ASTProvider(),
        });
        return server.capabilities;
    }));
    connection.onInitialized(() => {
        if (initSuccessfull) {
            server.registerInitializedProviders();
            void server.init();
        }
    });
    connection.onExit(() => {
        server.dispose();
    });
    // Listen on the connection
    connection.listen();
}
exports.startCommonServer = startCommonServer;
const elmPackageRoot = vscode_uri_1.URI.parse("https://raw.githubusercontent.com");
function convertToFileSystemUri(uri) {
    if (isVirtualPackageFile(uri)) {
        return vscode_uri_1.Utils.joinPath(elmPackageRoot, uri.path);
    }
    return uri;
}
exports.convertToFileSystemUri = convertToFileSystemUri;
exports.virtualPackagesRoot = vscode_uri_1.URI.parse("elm-virtual-file://package/");
function isVirtualPackageFile(uri) {
    return uri.scheme === "elm-virtual-file" && uri.authority === "package";
}
exports.isVirtualPackageFile = isVirtualPackageFile;
function readFileWithCachedVirtualPackageFile(uri, readFile, virtualPackageCache) {
    return __awaiter(this, void 0, void 0, function* () {
        if (isVirtualPackageFile(uri)) {
            const virtualPackageUri = vscode_uri_1.Utils.joinPath(virtualPackageCache.getVirtualPackageRoot(), uri.path);
            const cached = yield virtualPackageCache.get(virtualPackageUri);
            if (cached) {
                return cached;
            }
            const result = yield readFile(convertToFileSystemUri(uri));
            yield virtualPackageCache.set(virtualPackageUri, result);
            return result;
        }
        else {
            return yield readFile(convertToFileSystemUri(uri));
        }
    });
}
exports.readFileWithCachedVirtualPackageFile = readFileWithCachedVirtualPackageFile;
//# sourceMappingURL=index.js.map