import { CancellationToken } from "vscode-languageserver";
export declare class OperationCanceledException {
}
export interface ICancellationToken {
    isCancellationRequested(): boolean;
    /** @throws OperationCanceledException if isCancellationRequested is true */
    throwIfCancellationRequested(): void;
}
export declare class ServerCancellationToken implements ICancellationToken {
    private cancellationToken;
    constructor(cancellationToken: CancellationToken);
    isCancellationRequested(): boolean;
    throwIfCancellationRequested(): void;
}
/**
 * ThrottledCancellationToken taken from Typescript: https://github.com/microsoft/TypeScript/blob/79ffd03f8b73010fa03cef624e5f1770bc9c975b/src/services/services.ts#L1152
 */
export declare class ThrottledCancellationToken implements ICancellationToken {
    private cancellationToken;
    private readonly throttleWaitMilliseconds;
    private lastCancellationCheckTime;
    constructor(cancellationToken: CancellationToken, throttleWaitMilliseconds?: number);
    isCancellationRequested(): boolean;
    throwIfCancellationRequested(): void;
}
