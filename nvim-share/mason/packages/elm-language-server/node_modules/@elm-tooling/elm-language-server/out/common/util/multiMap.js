"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiMap = void 0;
/**
 * A map that abtracts storing items with the same key
 */
class MultiMap extends Map {
    get(key, filter, sort) {
        let found = super.get(key);
        if (!found) {
            return;
        }
        if (Array.isArray(found)) {
            found = (filter ? found.filter(filter) : found).sort(sort)[0];
        }
        if (found && (!filter || filter(found))) {
            return found;
        }
    }
    getAll(key) {
        const found = super.get(key);
        if (Array.isArray(found)) {
            return found;
        }
        else if (found) {
            return [found];
        }
    }
    set(key, val, equal) {
        if (super.has(key)) {
            const existing = super.get(key);
            if (Array.isArray(existing)) {
                if (!equal || !existing.some((imp) => equal(imp, val))) {
                    existing.push(val);
                }
            }
            else if (existing) {
                if (!equal || !equal(existing, val)) {
                    super.set(key, [existing, val]);
                }
            }
        }
        else {
            super.set(key, val);
        }
        return this;
    }
    replace(key, val) {
        return super.set(key, val);
    }
    forEach(callbackfn) {
        super.forEach((val, key, map) => {
            if (Array.isArray(val)) {
                val.forEach((v) => callbackfn(v, key, map));
            }
            else {
                callbackfn(val, key, map);
            }
        });
    }
}
exports.MultiMap = MultiMap;
//# sourceMappingURL=multiMap.js.map