"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tsyringe_1 = require("tsyringe");
const vscode_languageserver_1 = require("vscode-languageserver");
const treeUtils_1 = require("../../util/treeUtils");
const codeActionProvider_1 = require("../codeActionProvider");
const refactorName = "move_function";
codeActionProvider_1.CodeActionProvider.registerRefactorAction(refactorName, {
    getAvailableActions: (params) => {
        var _a, _b, _c;
        if (!((_a = tsyringe_1.container.resolve("Settings").extendedCapabilities) === null || _a === void 0 ? void 0 : _a.moveFunctionRefactoringSupport)) {
            return [];
        }
        const nodeAtPosition = treeUtils_1.TreeUtils.getNamedDescendantForPosition(params.sourceFile.tree.rootNode, params.range.start);
        if ((((_b = nodeAtPosition.parent) === null || _b === void 0 ? void 0 : _b.type) === "type_annotation" ||
            ((_c = nodeAtPosition.parent) === null || _c === void 0 ? void 0 : _c.type) === "function_declaration_left") &&
            !treeUtils_1.TreeUtils.findParentOfType("let_in_expr", nodeAtPosition)) {
            const functionName = nodeAtPosition.text;
            return [
                {
                    title: "Move Function",
                    command: {
                        title: "Refactor",
                        command: `elm.refactor-${params.program.getRootPath().toString()}`,
                        arguments: [
                            "moveFunction",
                            { textDocument: params.textDocument, range: params.range },
                            functionName,
                        ],
                    },
                    kind: vscode_languageserver_1.CodeActionKind.RefactorRewrite,
                    data: {
                        actionName: "move_function",
                        refactorName,
                        uri: params.sourceFile.uri,
                        range: params.range,
                    },
                },
            ];
        }
        return [];
    },
    getEditsForAction: () => {
        return {};
    },
});
//# sourceMappingURL=moveFunctionCodeAction.js.map