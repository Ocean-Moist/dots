import { Position } from "vscode-languageserver";
import { SyntaxNode, Tree } from "web-tree-sitter";
import { ISourceFile } from "../../compiler/forest";
import { TRecord, Type } from "../../compiler/typeInference";
import { IProgram } from "../../compiler/program";
import { Range } from "vscode-languageserver-textdocument";
import { ISymbol } from "../../compiler/binder";
export type NodeType = "Function" | "FunctionParameter" | "TypeAlias" | "Type" | "Operator" | "Module" | "CasePattern" | "AnonymousFunctionParameter" | "UnionConstructor" | "FieldType" | "TypeVariable" | "Port" | "Import";
export declare class TreeUtils {
    static getModuleNameNode(tree: Tree): SyntaxNode | undefined;
    static getModuleNameCommentNode(tree: Tree): SyntaxNode | undefined;
    static getModuleExposingListNodes(tree: Tree): SyntaxNode[];
    static findFirstNamedChildOfType(type: string, node: SyntaxNode): SyntaxNode | undefined;
    static findAllNamedChildrenOfType(type: string | string[], node: SyntaxNode): SyntaxNode[] | undefined;
    static findExposedFunctionNode(node: SyntaxNode, functionName: string): SyntaxNode | undefined;
    static isExposedFunctionOrPort(tree: Tree, functionName: string): boolean;
    static findExposedTypeOrTypeAliasNode(node: SyntaxNode, typeName: string): SyntaxNode | undefined;
    static isExposedTypeOrTypeAlias(tree: Tree, typeName: string): boolean;
    static findUnionConstructorCalls(tree: Tree, unionConstructorName: string, moduleNamePrefix?: string): SyntaxNode[] | undefined;
    static findOperator(sourceFile: ISourceFile, operatorName: string): SyntaxNode | undefined;
    static findTypeDeclaration(tree: Tree, typeName: string): SyntaxNode | undefined;
    static findModuleDeclaration(tree: Tree): SyntaxNode | undefined;
    static findAllTopLevelFunctionDeclarations(tree: Tree): SyntaxNode[] | undefined;
    static getFunctionNameNodeFromDefinition(node: SyntaxNode): SyntaxNode | undefined;
    static getTypeOrTypeAliasOrPortNameNodeFromDefinition(node: SyntaxNode): SyntaxNode | undefined;
    static isTypeUsage(upperCaseQid: SyntaxNode): boolean;
    static isConstructorUsage(upperCaseQid: SyntaxNode): boolean;
    static findTypeOrTypeAliasCalls(tree: Tree, typeOrTypeAliasName: string, nodeType: NodeType): SyntaxNode[];
    static findAllTypeDeclarations(tree: Tree): SyntaxNode[] | undefined;
    /**
     * @deprecated Should not be used due to performance. Use bindings instead
     */
    static findImportClauseByName(tree: Tree, moduleName: string): SyntaxNode | undefined;
    static getTypeOrTypeAliasOfFunctionParameter(node: SyntaxNode | undefined): SyntaxNode | undefined;
    static getReturnTypeOrTypeAliasOfFunctionDefinition(node: SyntaxNode | undefined): SyntaxNode | undefined;
    static getRecordTypeOfFunctionRecordParameter(node: SyntaxNode | undefined, program: IProgram): TRecord | undefined;
    static getTypeAliasOfRecordField(node: SyntaxNode | undefined, sourceFile: ISourceFile, program: IProgram): SyntaxNode | undefined;
    static getTypeAliasOfRecord(node: SyntaxNode | undefined, sourceFile: ISourceFile, program: IProgram): SyntaxNode | undefined;
    static getAllFieldsFromTypeAlias(node: SyntaxNode | undefined): {
        field: string;
        type: string;
    }[] | undefined;
    static descendantsOfType(node: SyntaxNode, type: string): SyntaxNode[];
    static getNamedDescendantForPosition(node: SyntaxNode, position: Position): SyntaxNode;
    static getDescendantForPosition(node: SyntaxNode, position: Position): SyntaxNode;
    static getNamedDescendantForRange(sourceFile: ISourceFile, range: Range): SyntaxNode;
    static getDescendantForRange(sourceFile: ISourceFile, range: Range): SyntaxNode;
    static findPreviousNode(node: SyntaxNode, position: Position): SyntaxNode | undefined;
    static getNamedDescendantForLineBeforePosition(node: SyntaxNode, position: Position): SyntaxNode;
    static getNamedDescendantForLineAfterPosition(node: SyntaxNode, position: Position): SyntaxNode;
    static findParentOfType(typeToLookFor: string, node: SyntaxNode, topLevel?: boolean): SyntaxNode | undefined;
    static getLastImportNode(tree: Tree): SyntaxNode | undefined;
    static isReferenceFullyQualified(node: SyntaxNode): boolean;
    static getTypeAnnotation(valueDeclaration?: SyntaxNode): SyntaxNode | undefined;
    static getValueDeclaration(typeAnnotation?: SyntaxNode): SyntaxNode | undefined;
    /**
     * This gets a list of all ancestors of a type
     * in order from the closest declaration up to the top level declaration
     */
    static getAllAncestorsOfType(type: string, node: SyntaxNode): SyntaxNode[];
    /**
     * @deprecated Should not be used due to performance. Use bindings instead
     */
    static findAllImportClauseNodes(tree: Tree): SyntaxNode[] | undefined;
    static isIdentifier(node: SyntaxNode): boolean;
    static isImport(node: SyntaxNode): boolean;
    static nextNode(node: SyntaxNode): SyntaxNode | undefined;
    static findFieldReference(type: Type, fieldName: string): ISymbol | undefined;
    static findImportAliasOfModule(moduleName: string, tree: Tree): string | undefined;
}
