"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultistepOperation = void 0;
const cancellation_1 = require("../cancellation");
class MultistepOperation {
    constructor(connection) {
        this.connection = connection;
    }
    startNew(cancellationToken, action, done) {
        this.complete();
        this.cancellationToken = cancellationToken;
        this.done = done;
        this.executeAction(action);
    }
    complete() {
        if (this.done !== undefined) {
            this.done();
            this.done = undefined;
        }
        this.cancellationToken = undefined;
        this.setTimerHandle(undefined);
        this.setImmediateId(undefined);
        this.savedPromise = undefined;
    }
    immediate(action) {
        this.setImmediateId(setImmediate(() => {
            this.immediateId = undefined;
            this.executeAction(action);
        }));
    }
    delay(ms, action) {
        this.setTimerHandle(setTimeout(() => {
            this.timerHandle = undefined;
            this.executeAction(action);
        }, ms));
    }
    promise(action) {
        var _a;
        if ((_a = this.cancellationToken) === null || _a === void 0 ? void 0 : _a.isCancellationRequested) {
            this.complete();
        }
        else {
            this.savedPromise = action()
                .then(() => {
                if (!this.hasPendingWork()) {
                    this.complete();
                }
            })
                .catch(() => {
                this.complete();
            })
                .finally(() => {
                this.savedPromise = undefined;
            });
        }
    }
    executeAction(action) {
        var _a;
        let stop = false;
        try {
            if ((_a = this.cancellationToken) === null || _a === void 0 ? void 0 : _a.isCancellationRequested) {
                stop = true;
            }
            else {
                action(this);
            }
        }
        catch (e) {
            // ignore cancellation request
            if (!(e instanceof cancellation_1.OperationCanceledException)) {
                this.connection.console.error(`${e} delayed processing of request`);
            }
            stop = true;
        }
        if (stop || !this.hasPendingWork()) {
            this.complete();
        }
    }
    setTimerHandle(timerHandle) {
        if (this.timerHandle !== undefined) {
            clearTimeout(this.timerHandle);
        }
        this.timerHandle = timerHandle;
    }
    setImmediateId(immediateId) {
        if (this.immediateId !== undefined) {
            clearImmediate(this.immediateId);
        }
        this.immediateId = immediateId;
    }
    hasPendingWork() {
        return !!this.timerHandle || !!this.immediateId || !!this.savedPromise;
    }
}
exports.MultistepOperation = MultistepOperation;
//# sourceMappingURL=multistepOperation.js.map