"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HoverProvider = void 0;
const tsyringe_1 = require("tsyringe");
const vscode_languageserver_1 = require("vscode-languageserver");
const vscode_uri_1 = require("vscode-uri");
const _1 = require(".");
const elmUtils_1 = require("../../compiler/utils/elmUtils");
const elmWorkspaceMatcher_1 = require("../util/elmWorkspaceMatcher");
const hintHelper_1 = require("../util/hintHelper");
const treeUtils_1 = require("../util/treeUtils");
class HoverProvider {
    constructor() {
        this.handleHoverRequest = (params) => {
            this.connection.console.info(`A hover was requested`);
            const checker = params.program.getTypeChecker();
            const sourceFile = params.sourceFile;
            if (sourceFile) {
                const nodeAtPosition = treeUtils_1.TreeUtils.getNamedDescendantForPosition(sourceFile.tree.rootNode, params.position);
                let definitionNode = checker.findDefinition(nodeAtPosition, sourceFile).symbol;
                if (definitionNode) {
                    if (definitionNode.node.type === "function_declaration_left" &&
                        definitionNode.node.parent) {
                        definitionNode = Object.assign(Object.assign({}, definitionNode), { node: definitionNode.node.parent });
                    }
                    const typeString = checker.typeToString(checker.findType(definitionNode.node), sourceFile);
                    return this.createMarkdownHoverFromDefinition(definitionNode, typeString);
                }
                else {
                    const specialMatch = (0, elmUtils_1.getEmptyTypes)().find((a) => a.name === nodeAtPosition.text);
                    if (specialMatch) {
                        return {
                            contents: {
                                kind: vscode_languageserver_1.MarkupKind.Markdown,
                                value: specialMatch.markdown,
                            },
                        };
                    }
                }
            }
        };
        this.connection = tsyringe_1.container.resolve("Connection");
        this.diagnostics = tsyringe_1.container.resolve(_1.DiagnosticsProvider);
        this.connection.onHover(this.diagnostics.interruptDiagnostics(() => new elmWorkspaceMatcher_1.ElmWorkspaceMatcher((params) => vscode_uri_1.URI.parse(params.textDocument.uri)).handle(this.handleHoverRequest.bind(this))));
    }
    createMarkdownHoverFromDefinition(definitionNode, typeString) {
        if (definitionNode) {
            const value = definitionNode.type === "FunctionParameter" ||
                definitionNode.type === "AnonymousFunctionParameter" ||
                definitionNode.type === "CasePattern"
                ? hintHelper_1.HintHelper.createHintFromFunctionParameter(definitionNode.node, typeString)
                : hintHelper_1.HintHelper.createHint(definitionNode.node, typeString);
            if (value) {
                return {
                    contents: {
                        kind: vscode_languageserver_1.MarkupKind.Markdown,
                        value,
                    },
                };
            }
        }
    }
}
exports.HoverProvider = HoverProvider;
//# sourceMappingURL=hoverProvider.js.map