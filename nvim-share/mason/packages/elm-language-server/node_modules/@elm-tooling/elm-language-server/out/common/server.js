"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Server = void 0;
const path_1 = __importDefault(require("path"));
const tsyringe_1 = require("tsyringe");
const vscode_uri_1 = require("vscode-uri");
const capabilityCalculator_1 = require("./capabilityCalculator");
const program_1 = require("../compiler/program");
const providers_1 = require("./providers");
const elmLsDiagnostics_1 = require("./providers/diagnostics/elmLsDiagnostics");
const fileEventsHandler_1 = require("./providers/handlers/fileEventsHandler");
const textDocumentEvents_1 = require("./util/textDocumentEvents");
const findTestsProvider_1 = require("./providers/findTestsProvider");
const elmReviewDiagnostics_1 = require("./providers/diagnostics/elmReviewDiagnostics");
const virtualFileProvider_1 = require("./providers/virtualFileProvider");
const installPackageCodeAction = __importStar(require("./providers/codeAction/installPackageCodeAction"));
class Server {
    constructor(params, fileSystemHost, initializationOptions) {
        var _a, _b, _c;
        this.params = params;
        this.fileSystemHost = fileSystemHost;
        this.initSuccessfull = false;
        this.isVirtualFileSystem = false;
        this.disposables = [];
        this.connection = tsyringe_1.container.resolve("Connection");
        const uri = this.getWorkspaceUri(this.params);
        if (uri) {
            this.isVirtualFileSystem = uri.scheme !== "file";
            if (!fileSystemHost.readDirectorySync &&
                !initializationOptions.elmJsonFiles) {
                this.connection.window.showErrorMessage("Virtual file system is not supported.");
                this.connection.console.error("Virtual file system is not supported");
                return;
            }
            const elmJsons = (_b = (_a = initializationOptions.elmJsonFiles) === null || _a === void 0 ? void 0 : _a.map((uri) => vscode_uri_1.URI.parse(uri))) !== null && _b !== void 0 ? _b : (_c = fileSystemHost.readDirectorySync) === null || _c === void 0 ? void 0 : _c.call(fileSystemHost, uri, ["**/elm.json"], ["**/node_modules/**", "**/elm-stuff/**"]);
            if (!elmJsons) {
                this.connection.window.showErrorMessage("Unable to find elm json files.");
                return;
            }
            if (elmJsons.length > 0) {
                this.connection.console.info(`Found ${elmJsons.length} elm.json files for workspace ${uri.toString()}`);
                const listOfElmJsonFolders = elmJsons.map((a) => this.getElmJsonFolder(a));
                const topLevelElmJsons = this.findTopLevelFolders(listOfElmJsonFolders);
                this.connection.console.info(`Found ${topLevelElmJsons.size} unique elmWorkspaces for workspace ${uri.toString()}`);
                const textDocuments = tsyringe_1.container.resolve(textDocumentEvents_1.TextDocumentEvents);
                const programHost = Object.assign(Object.assign({}, fileSystemHost), { readFile: (uri) => __awaiter(this, void 0, void 0, function* () {
                        const textDocument = textDocuments.get(uri.toString());
                        if (textDocument) {
                            return textDocument.getText();
                        }
                        const result = yield fileSystemHost.readFile(uri);
                        return result;
                    }) });
                const elmWorkspaces = [];
                topLevelElmJsons.forEach((elmWorkspace) => {
                    elmWorkspaces.push(new program_1.Program(elmWorkspace, programHost));
                });
                tsyringe_1.container.register("ElmWorkspaces", {
                    useValue: elmWorkspaces,
                });
                this.initSuccessfull = true;
            }
            else {
                this.connection.window.showErrorMessage("No elm.json found. Please run 'elm init' in your main directory.");
                this.connection.console.info(`No elm.json found`);
            }
        }
        else {
            this.connection.console.info(`No workspace was setup by the client`);
        }
    }
    get capabilities() {
        const calculator = tsyringe_1.container.resolve(capabilityCalculator_1.CapabilityCalculator);
        return {
            capabilities: calculator.capabilities,
        };
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            const progress = yield this.connection.window.createWorkDoneProgress();
            progress.begin("Initializing workspace", 0, "Indexing");
            if (!this.initSuccessfull) {
                progress.done();
                return;
            }
            const elmWorkspaces = tsyringe_1.container.resolve("ElmWorkspaces");
            yield Promise.all(elmWorkspaces
                .map((ws) => ({ ws, indexedPercent: 0 }))
                .map((indexingWs, _, all) => indexingWs.ws.init((percent) => {
                // update progress for this workspace
                indexingWs.indexedPercent = percent;
                // report average progress across all workspaces
                const avgIndexed = all.reduce((sum, { indexedPercent }) => sum + indexedPercent, 0) /
                    all.length;
                progress.report(avgIndexed, "Indexing");
            })));
            progress.done();
        });
    }
    registerInitializedProviders() {
        return __awaiter(this, void 0, void 0, function* () {
            const settings = tsyringe_1.container.resolve("Settings");
            // We can now query the client for up to date settings
            settings.initFinished();
            const clientSettings = yield settings.getClientSettings();
            tsyringe_1.container.register("ClientSettings", {
                useValue: clientSettings,
            });
            // these register calls rely on settings having been setup
            tsyringe_1.container.register(providers_1.ElmMakeDiagnostics, {
                useValue: new providers_1.ElmMakeDiagnostics(this.fileSystemHost),
            });
            tsyringe_1.container.register(elmReviewDiagnostics_1.ElmReviewDiagnostics, {
                useValue: new elmReviewDiagnostics_1.ElmReviewDiagnostics(this.fileSystemHost),
            });
            tsyringe_1.container.register(elmLsDiagnostics_1.ElmLsDiagnostics, {
                useValue: new elmLsDiagnostics_1.ElmLsDiagnostics(),
            });
            tsyringe_1.container.register(providers_1.DiagnosticsProvider, {
                useValue: new providers_1.DiagnosticsProvider(),
            });
            if (!this.isVirtualFileSystem) {
                tsyringe_1.container.register(providers_1.DocumentFormattingProvider, {
                    useValue: new providers_1.DocumentFormattingProvider(this.fileSystemHost),
                });
            }
            new providers_1.CodeActionProvider(this.fileSystemHost);
            new providers_1.FoldingRangeProvider();
            new providers_1.CompletionProvider();
            new providers_1.HoverProvider();
            new providers_1.DefinitionProvider();
            new providers_1.ReferencesProvider();
            new providers_1.DocumentSymbolProvider();
            new providers_1.WorkspaceSymbolProvider();
            new providers_1.CodeLensProvider();
            new providers_1.SelectionRangeProvider();
            new providers_1.RenameProvider();
            new fileEventsHandler_1.FileEventsHandler();
            new providers_1.LinkedEditingRangesProvider();
            new findTestsProvider_1.FindTestsProvider();
            new virtualFileProvider_1.VirtualFileProvider();
            installPackageCodeAction.register(this.fileSystemHost);
        });
    }
    dispose() {
        tsyringe_1.container.resolve(providers_1.DiagnosticsProvider).dispose();
        tsyringe_1.container
            .resolve("ElmWorkspaces")
            .forEach((program) => program.dispose());
    }
    getElmJsonFolder(uri) {
        return vscode_uri_1.Utils.dirname(uri);
    }
    findTopLevelFolders(listOfElmJsonFolders) {
        const result = new Map();
        listOfElmJsonFolders.forEach((uri) => {
            result.set(uri.fsPath, uri);
        });
        listOfElmJsonFolders.forEach((parentUri) => {
            listOfElmJsonFolders.forEach((childUri) => {
                const parentPath = parentUri.fsPath + path_1.default.sep;
                const childPath = childUri.fsPath + path_1.default.sep;
                if (parentPath !== childPath && childPath.startsWith(parentPath)) {
                    result.delete(childUri.fsPath);
                }
            });
        });
        return result;
    }
    getWorkspaceUri(params) {
        if (params.workspaceFolders && params.workspaceFolders.length > 0) {
            return vscode_uri_1.URI.parse(params.workspaceFolders[0].uri);
        }
        else if (params.rootUri) {
            return vscode_uri_1.URI.parse(params.rootUri);
        }
        else if (params.rootPath) {
            return vscode_uri_1.URI.file(params.rootPath);
        }
        else {
            return null;
        }
    }
}
exports.Server = Server;
//# sourceMappingURL=server.js.map