import { TextEdit } from "vscode-languageserver";
import { SyntaxNode, Tree } from "web-tree-sitter";
export declare class RefactorEditUtils {
    static findLineNumberAfterCurrentFunction(nodeAtPosition: SyntaxNode): number | undefined;
    static findLineNumberBeforeCurrentFunction(nodeAtPosition: SyntaxNode): number | undefined;
    static unexposedValueInModule(tree: Tree, valueName: string): TextEdit | undefined;
    static createTopLevelFunction(insertLineNumber: number, valueName: string, typeString: string | undefined, args: number | string[], content: string): TextEdit;
    static createFunction(insertLineNumber: number, valueName: string, typeString: string | undefined, args: number | string[], content: string, contentIndendation?: number, targetIndendation?: number): TextEdit;
    static createTypeAlias(insertLineNumber: number, aliasName: string, typeString: string, typeVariables: string[]): TextEdit;
    private static argListFromArity;
    static exposeValueInModule(tree: Tree, valueName: string, withVariants?: boolean): TextEdit | undefined;
    static removeValueFromImport(tree: Tree, moduleName: string, valueName: string, forceRemoveLastComma?: boolean): TextEdit | undefined;
    static removeImportExposingList(tree: Tree, moduleName: string): TextEdit | undefined;
    static addImport(tree: Tree, moduleName: string, valueName?: string, moduleAlias?: string): TextEdit | undefined;
    static changeQualifiedReferenceModule(node: SyntaxNode, newModuleName: string): TextEdit | undefined;
    static removeQualifiedReference(node: SyntaxNode): TextEdit | undefined;
    static addImports(tree: Tree, importData: {
        moduleName: string;
        valueName?: string;
    }[]): TextEdit | undefined;
    static addModuleDeclaration(moduleName: string): TextEdit;
    static renameModuleDeclaration(tree: Tree, newModuleName: string): TextEdit | undefined;
    static removeRecordPatternValue(pattern: SyntaxNode): TextEdit;
    static removeFunction(nodeAtPosition: SyntaxNode): TextEdit | undefined;
    static removeTypeAlias(node: SyntaxNode | null): TextEdit | undefined;
    static removeTypeValue(nodeAtPosition: SyntaxNode): TextEdit | undefined;
    static removeType(node: SyntaxNode | null): TextEdit | undefined;
    static addUnionVariant(typeDeclaration: SyntaxNode, name: string, params: string[]): TextEdit | undefined;
    private static removeValueFromExposingList;
}
export declare function getSpaces(n: number): string;
